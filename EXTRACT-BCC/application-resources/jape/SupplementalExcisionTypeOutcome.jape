Phase: SupplementalExcisionTypeOutcome
Input: ExcisionType Split SupplementalExcisionTypeOutcome ClockFace NewLine
Options: control=appelt

Rule: ExcisionTypePositiveDeepClock1a
Priority: 100

(
	({ExcisionType.ExcisionType == "Supplemental Deep Margin Specimen"})
	({ClockFace})?
	({SupplementalExcisionTypeOutcome.Negation == Affirmed})
):match
-->
:match.SuppExcisionTypeOutcomeDetails = { rule = ExcisionTypePositiveDeepClock1a, 
ExcisionType = :match.ExcisionType.ExcisionType,
ExcisionType2 = :match.ExcisionType.ExcisionType2,
DeepClockPosition = :match.ClockFace.time,
SupplementalExcisionTypeOutcome = "Yes"}

Rule: ExcisionTypeNegativeDeepClock1b
Priority: 100

(
	({ExcisionType.ExcisionType == "Supplemental Deep Margin Specimen"})
	({ClockFace})?
	({SupplementalExcisionTypeOutcome.Negation == Negated})
):match
-->
:match.SuppExcisionTypeOutcomeDetails = { rule = ExcisionTypeNegativeDeepClock1b, 
ExcisionType = :match.ExcisionType.ExcisionType,
ExcisionType2 = :match.ExcisionType.ExcisionType2,
DeepClockPosition = :match.ClockFace.time,
SupplementalExcisionTypeOutcome = "No"}

Rule: ExcisionTypePositivePeripheralClock1a
Priority: 100

(
	({ExcisionType.ExcisionType == "Supplemental Peripheral Margin Specimen"})
	({ClockFace})?
	({SupplementalExcisionTypeOutcome.Negation == Affirmed})
):match
-->
:match.SuppExcisionTypeOutcomeDetails = { rule = ExcisionTypePositivePeripheralClock1a, 
ExcisionType = :match.ExcisionType.ExcisionType,
ExcisionType2 = :match.ExcisionType.ExcisionType2,
PeripheralClockPosition = :match.ClockFace.time,
SupplementalExcisionTypeOutcome = "Yes"}

Rule: ExcisionTypeNegativePeripheralClock1b
Priority: 100

(
	({ExcisionType.ExcisionType == "Supplemental Peripheral Margin Specimen"})
	({ClockFace})?
	({SupplementalExcisionTypeOutcome.Negation == Negated})
):match
-->
:match.SuppExcisionTypeOutcomeDetails = { rule = ExcisionTypeNegativePeripheralClock1b, 
ExcisionType = :match.ExcisionType.ExcisionType,
ExcisionType2 = :match.ExcisionType.ExcisionType2,
PeripheralClockPosition = :match.ClockFace.time,
SupplementalExcisionTypeOutcome = "No"}

Rule: ExcisionTypePositiveDeepClock2a
Priority: 100

(
	({ExcisionType.ExcisionType == "Supplemental Deep Margin Specimen"})
	({ClockFace})?
	({Split})
	({SupplementalExcisionTypeOutcome.Negation == Affirmed})
):match
-->
:match.SuppExcisionTypeOutcomeDetails = { rule = ExcisionTypePositiveDeepClock2a, 
ExcisionType = :match.ExcisionType.ExcisionType,
ExcisionType2 = :match.ExcisionType.ExcisionType2,
DeepClockPosition = :match.ClockFace.time,
SupplementalExcisionTypeOutcome = "Yes"}

Rule: ExcisionTypeNegativeDeepClock2b
Priority: 100

(
	({ExcisionType.ExcisionType == "Supplemental Deep Margin Specimen"})
	({ClockFace})?
	({Split})
	({SupplementalExcisionTypeOutcome.Negation == Negated})
):match
-->
:match.SuppExcisionTypeOutcomeDetails = { rule = SupplementalExcisionTypeOutcome2b, 
ExcisionType = :match.ExcisionType.ExcisionType,
ExcisionType2 = :match.ExcisionType.ExcisionType2,
DeepClockPosition = :match.ClockFace.time,
SupplementalExcisionTypeOutcome = "No"}

Rule: ExcisionTypePositivePeripheralClock2a
Priority: 100

(
	({ExcisionType.ExcisionType == "Supplemental Peripheral Margin Specimen"})
	({ClockFace})?
	({Split})
	({SupplementalExcisionTypeOutcome.Negation == Affirmed})
):match
-->
:match.SuppExcisionTypeOutcomeDetails = { rule = SupplementalExcisionTypeOutcome2a, 
ExcisionType = :match.ExcisionType.ExcisionType,
ExcisionType2 = :match.ExcisionType.ExcisionType2,
PeripheralClockPosition = :match.ClockFace.time,
SupplementalExcisionTypeOutcome = "Yes"}

Rule: ExcisionTypeNegativePeripheralClock2b
Priority: 100

(
	({ExcisionType.ExcisionType == "Supplemental Peripheral Margin Specimen"})
	({ClockFace})?
	({Split})
	({SupplementalExcisionTypeOutcome.Negation == Negated})
):match
-->
:match.SuppExcisionTypeOutcomeDetails = { rule = SupplementalExcisionTypeOutcome2b, 
ExcisionType = :match.ExcisionType.ExcisionType,
ExcisionType2 = :match.ExcisionType.ExcisionType2,
PeripheralClockPosition = :match.ClockFace.time,
SupplementalExcisionTypeOutcome = "No"}

