Imports: {import static gate.Utils.*; }

Phase: MacroDetailsSentenceBreak
Input: Split Sentence AdditionalSentenceBreak ClinicalDetailsQuestion MacroDetails
Options: control=appelt

Rule: MacroDetailsSentenceBreak
(
	
    ({MacroDetails}):match
    ({ClinicalDetailsQuestion})
    ({MacroDetails}):match1

):match2

-->

:match2.MacroDetails = { ruleFinal = MacroDetails, 
Pre-opDiagnosis = :match1.MacroDetails.Pre-opDiagnosis,
Pre-opDiagnosis2 = :match1.MacroDetails.Pre-opDiagnosis2,
CUI = :match1.MacroDetails.CUI,
CUI2 = :match1.MacroDetails.CUI2,
Pre-opDiagnosisClass = :match1.MacroDetails.BCCClass,
Pre-opDiagnosisClass2 = :match1.MacroDetails.BCCClass2,
Ulcerated = :match1.MacroDetails.Ulcerated, 
ExcisionType = :match1.MacroDetails.ExcisionType,
ExcisionType2 = :match1.MacroDetails.ExcisionType2,
ExcisionNature = :match1.MacroDetails.ExcisionType2,
BodyPart = :match1.MacroDetails.BodyPart,
BodyPart2 = :match1.MacroDetails.BodyPart2,
MultipleScalp = :match1.MacroDetails.MultipleScalp,
Lateralization = :match1.MacroDetails.Lateralization,
UpperOrLower = :match1.MacroDetails.UpperOrLower,
AnteriorOrPosterior = :match1.MacroDetails.AnteriorOrPosterior,
ProximalOrDistal = :match1.MacroDetails.ProximalOrDistal,
MedialOrLateral = :match1.MacroDetails.MedialOrLateral,
"3DSpecimenSize" = :match1.MacroDetails."3DSpecimenSize",// Why string and not a value?
"3DSpecimenSize2" = :match1.MacroDetails."3DSpecimenSize2",// Why string and not a value?
"3DSpecimenSize3" = :match1.MacroDetails."3DSpecimenSize3",// Why string and not a value?
SpecimenMeasurementUnit = :match1.MacroDetails.SpecimenMeasurementUnit,
MaxMacroTumourDiameter = :match1.MacroDetails.MaxMacroTumourDiameter,
MaxMacroMeasurementUnit = :match1.MacroDetails.MaxMacroMeasurementUnit,
Tag = :match1.MacroDetails.Tag,

Pre-opDiagnosis = :match.MacroDetails.Pre-opDiagnosis,
Pre-opDiagnosis2 = :match.MacroDetails.Pre-opDiagnosis2,
CUI = :match.MacroDetails.CUI,
CUI2 = :match.MacroDetails.CUI2,
Pre-opDiagnosisClass = :match.MacroDetails.BCCClass,
Pre-opDiagnosisClass2 = :match.MacroDetails.BCCClass2,
Ulcerated = :match.MacroDetails.Ulcerated, 
ExcisionType = :match.MacroDetails.ExcisionType,
ExcisionType2 = :match.MacroDetails.ExcisionType2,
ExcisionNature = :match.MacroDetails.ExcisionType2,
BodyPart = :match.MacroDetails.BodyPart,
BodyPart2 = :match.MacroDetails.BodyPart2,
MultipleScalp = :match.MacroDetails.MultipleScalp,
Lateralization = :match.MacroDetails.Lateralization,
UpperOrLower = :match.MacroDetails.UpperOrLower,
AnteriorOrPosterior = :match.MacroDetails.AnteriorOrPosterior,
ProximalOrDistal = :match.MacroDetails.ProximalOrDistal,
MedialOrLateral = :match.MacroDetails.MedialOrLateral,
"3DSpecimenSize" = :match.MacroDetails."3DSpecimenSize",// Why string and not a value?
"3DSpecimenSize2" = :match.MacroDetails."3DSpecimenSize2",// Why string and not a value?
"3DSpecimenSize3" = :match.MacroDetails."3DSpecimenSize3",// Why string and not a value?
SpecimenMeasurementUnit = :match.MacroDetails.SpecimenMeasurementUnit,
MaxMacroTumourDiameter = :match.MacroDetails.MaxMacroTumourDiameter,
MaxMacroMeasurementUnit = :match.MacroDetails.MaxMacroMeasurementUnit
Tag = :match.MacroDetails.Tag

},

:match1 { 
  inputAS.removeAll(match1Annots);//This deletes the match1 annotation. So would remove the annotation for excision
},
:match1{
  Annotation matchAnn = match1Annots.iterator().next();//Get Annotations
  FeatureMap preTagFM = Factory.newFeatureMap();//create new featuremap
  preTagFM.putAll(matchAnn.getFeatures());//copy all of the features from annotation
  Long tokenStart = match1Annots.firstNode().getOffset();//get start of annotation
  Long tokenEnd = match1Annots.lastNode().getOffset();// get end of annotation
  preTagFM.put("ruleDelete", "MacroDetailsSentenceBreak");//add rule name
  AnnotationSet defaultSet = doc.getAnnotations("Bio");// select annotation set
  gate.Utils.addAnn(defaultSet, tokenStart, tokenEnd, "MacroDetailsDeleted", preTagFM);//create annotation
},
:match { 
  inputAS.removeAll(matchAnnots);//This deletes the match1 annotation. So would remove the annotation for excision

},
:match{
  Annotation matchAnn = matchAnnots.iterator().next();//Get Annotations
  FeatureMap preTagFM = Factory.newFeatureMap();//create new featuremap
  preTagFM.putAll(matchAnn.getFeatures());//copy all of the features from annotation
  Long tokenStart = matchAnnots.firstNode().getOffset();//get start of annotation
  Long tokenEnd = matchAnnots.lastNode().getOffset();// get end of annotation
  preTagFM.put("ruleDelete", "MacroDetailsSentenceBreak");//add rule name
  AnnotationSet defaultSet = doc.getAnnotations("Bio");// select annotation set
  gate.Utils.addAnn(defaultSet, tokenStart, tokenEnd, "MacroDetailsDeleted", preTagFM);//create annotation
}
